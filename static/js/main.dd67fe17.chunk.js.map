{"version":3,"sources":["components/TodoList/TodoList.tsx","API/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","searchBy","sortBy","event","this","setState","target","value","sortedList","props","todos","filter","todo","title","toLowerCase","includes","completed","className","onChange","sort","type","name","search","map","readOnly","checked","onClick","onUserClick","userId","id","React","Component","getUser","fetch","then","response","json","CurrentUser","currentUser","UserId","result","user","email","phone","onClearUser","App","selectedUserId","setTodos","newUserId","changeUserId","bind","clearUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dd67fe17.chunk.js","sourcesContent":["/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../Types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  onUserClick: (newUserId: number) => void,\n};\n\ntype State = {\n  searchBy: string,\n  sortBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    searchBy: '',\n    sortBy: 'all',\n  };\n\n  search(event: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ searchBy: event.target.value });\n  }\n\n  sort(event: React.ChangeEvent<HTMLSelectElement>) {\n    this.setState({ sortBy: event.target.value });\n  }\n\n  render(): React.ReactNode {\n    let sortedList = this.props.todos.filter(todo => (\n      todo.title.toLowerCase().includes(this.state.searchBy.toLowerCase())));\n\n    switch (this.state.sortBy) {\n      case 'all':\n        break;\n      case 'completed':\n        sortedList = sortedList.filter(todo => todo.completed === true);\n        break;\n      case 'active':\n        sortedList = sortedList.filter(todo => todo.completed === false);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <form className=\"TodoList__form\">\n          <label>\n            Show:\n            <select\n              className=\"TodoList__select form_element\"\n              value={this.state.sortBy}\n              onChange={(event) => this.sort(event)}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"completed\">Completed</option>\n              <option value=\"active\">Actve</option>\n            </select>\n          </label>\n          <input\n            className=\"TodoList__input form_element\"\n            type=\"text\"\n            name=\"searchBar\"\n            value={this.state.searchBy}\n            onChange={(event) => this.search(event)}\n          />\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {sortedList.map(\n              todo => (\n                <li\n                  className=\"TodoList__item\"\n                  key={todo.id}\n                >\n                  <label>\n                    <input type=\"checkbox\" readOnly checked={todo.completed} />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"\n                  TodoList__user-button\n                  button\n                \"\n                    type=\"button\"\n                    onClick={() => this.props.onUserClick(todo.userId)}\n                  >\n                    {`User ${todo.userId}`}\n                  </button>\n                </li>\n              ),\n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import { Todo } from '../Types/Todo';\nimport { User } from '../Types/User';\n\nexport function getTodoList(): Promise<Todo[]> {\n  const responsePromise = fetch('https://mate.academy/students-api/todos');\n\n  const dataPromise = responsePromise\n    .then((response) => {\n      return response.json();\n    });\n\n  return dataPromise;\n}\n\nexport function getUser(userId: number): Promise <User> {\n  const responsePromise = fetch(`https://mate.academy/students-api/users/${userId}`);\n\n  const dataPromise = responsePromise\n    .then((response) => {\n      return response.json();\n    });\n\n  return dataPromise;\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../Types/User';\nimport { getUser } from '../../API/api';\n\ntype Props = {\n  UserId: number,\n  onClearUser: () => void,\n};\n\ntype State = {\n  currentUser: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    currentUser: null,\n  };\n\n  componentDidMount() {\n    getUser(this.props.UserId).then(\n      result => (this.setState({ currentUser: result })),\n    );\n  }\n\n  componentDidUpdate() {\n    getUser(this.props.UserId).then(\n      result => (this.setState({ currentUser: result })),\n    );\n  }\n\n  setCurrentUser(user: User) {\n    this.setState(() => ({ currentUser: user }));\n  }\n\n  render(): React.ReactNode {\n    const { currentUser } = this.state;\n\n    if (!currentUser) {\n      return (\n        <p>No user selected</p>\n      );\n    }\n\n    const {\n      id,\n      name,\n      email,\n      phone,\n    } = currentUser;\n\n    return (\n      <div className=\"CurrentUser\">\n        {currentUser && (\n          <>\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${id}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{name}</h3>\n            <p className=\"CurrentUser__email\">{email}</p>\n            <p className=\"CurrentUser__phone\">{phone}</p>\n            <button\n              type=\"button\"\n              className=\"CurrentUser__button\"\n              onClick={() => this.props.onClearUser()}\n            >\n              Clear user\n            </button>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './Types/Todo';\nimport { getTodoList } from './API/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[],\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    this.setTodos();\n  }\n\n  setTodos() {\n    getTodoList().then(\n      (result) => {\n        this.setState({ todos: result });\n      },\n    );\n  }\n\n  changeUserId(newUserId: number) {\n    this.setState(() => ({ selectedUserId: newUserId }));\n  }\n\n  clearUser() {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} onUserClick={this.changeUserId.bind(this)} />\n        </div>\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser UserId={selectedUserId} onClearUser={this.clearUser.bind(this)} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}